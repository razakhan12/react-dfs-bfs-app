{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","props","state","value","Color","count","className","onClick","style","backgroundColor","this","React","Component","Board","dfs","node","setInterval","sampleArray","array","neighbours","Nodes","i","visitedNode","x","y","getIndex","visited","undefined","console","log","dfsIterative","stack","visitedList","index","push","length","element","pop","e1","animation","bfsIterative","queue","comNode","shift","list","color","setState","handleClick","idx","startEnd","searchAlgo","handleInputChange","event","target","type","checked","name","key","onSubmit","handleSubmit","onChange","map","renderSquare","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0b04bc33.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nexport class Square extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      value:null,\n      Color:'white',\n      count: '0'\n    }\n  }\n  render() {\n    return (\n      <div className=\"square\" onClick={() => this.props.onClick()} style={{backgroundColor: this.props.value}}></div>\n    );\n  }\n  }\n\nexport class Board extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      array: [],\n      startEnd:0,\n      searchAlgo:0\n    }\n  }\n\ncomponentDidMount()\n{\n  const array = [];\n  let x = 0;\n  let y = 0;\n  for(let i = 0; i < 729; i++)\n  {\n    if(i % 27 === 0)\n    {\n      x = 0;\n      y++;\n      array.push({\"color\":\"white\", \"x\":x,\"y\":y, \"Nodes\":[], \"visited\":false});\n    }\n    else\n    {\n      x++;\n      array.push({\"color\":\"white\", \"x\":x,\"y\":y,\"Nodes\":[],\"visited\":false});\n    }\n  }\n// Adding all the neighbours to the Adjacency-list\n  for(let i = 0; i < 729; i++)\n  {\n      array[i].Nodes.push({\"x\":array[i].x,\"y\":array[i].y+1})\n      array[i].Nodes.push({\"x\":array[i].x,\"y\":array[i].y-1})\n      array[i].Nodes.push({\"x\":array[i].x+1,\"y\":array[i].y})\n      array[i].Nodes.push({\"x\":array[i].x-1,\"y\":array[i].y})\n      // array[i].Nodes.push({\"x\":array[i].x+1,\"y\":array[i].y+1})\n      // array[i].Nodes.push({\"x\":array[i].x-1,\"y\":array[i].y+1})\n      // array[i].Nodes.push({\"x\":array[i].x-1,\"y\":array[i].y-1})\n      // array[i].Nodes.push({\"x\":array[i].x+1,\"y\":array[i].y-1})\n  }\n\n  this.setState({array});\n}\n\ndfs = (node) =>\n{\n  setInterval(() =>\n  {\n    let sampleArray = {...this.state.array};\n    let neighbours = {...node.Nodes};\n      this.visitedNode('red',node.x,node.y);\n      for(let i in neighbours)\n      {\n          if(sampleArray[this.getIndex(neighbours[i])].visited !== true && sampleArray[this.getIndex(neighbours[i])] !== undefined)\n          {\n            console.log(neighbours[i]);\n            this.dfs(sampleArray[this.getIndex(neighbours[i])]);\n          }\n        }\n  }, 500);\n}\n\ndfsIterative = (node) =>\n{\n    var stack = [];\n    var visitedList = [];\n    let s = 0;\n    var index = undefined;\n    var sampleArray = {...this.state.array};\n    stack.push(sampleArray[node]);\n    console.log(stack);\n    while(stack.length !== 0)\n    { \n      var element = stack.pop();\n                  if(!element.visited)\n                  {\n                    for(let i in sampleArray)\n                    {\n                        if(sampleArray[i].x === element.x && sampleArray[i].y === element.y)\n                        {\n                          sampleArray[i].visited = true;\n                          visitedList.push(sampleArray[i]);\n                        }\n                    }\n                }\n                  let neighbours = element.Nodes;\n                  for(let i = 0; i < neighbours.length; i++)\n                  {\n                      let e1 = neighbours[i];\n                      if(this.getIndex(e1) !== undefined)\n                      index = this.getIndex(e1);\n                      if(sampleArray[index] !== undefined && !sampleArray[index].visited)\n                      {\n                          stack.push(sampleArray[index]);\n                      }\n                  }\n    }\n    this.animation(visitedList);\n  }\n\n  bfsIterative = (node) =>\n{\n    var queue = [];\n    var visitedList = [];\n    let s = 0;\n    var index = undefined;\n    var sampleArray = {...this.state.array};\n    queue.push(sampleArray[node]);\n    let comNode = sampleArray[node];\n    for(let i in sampleArray)\n    {\n        if(sampleArray[i].x === comNode.x && sampleArray[i].y === comNode.y)\n        {\n          sampleArray[i].visited = true;\n          visitedList.push(sampleArray[i]);\n        }\n    }\n    console.log(queue);\n    while(queue.length !== 0)\n    { \n      var element = queue.shift();\n      let neighbours = element.Nodes;\n                  for(let i = 0; i < neighbours.length; i++)\n                  {\n                      let e1 = neighbours[i];\n                      if(this.getIndex(e1) !== undefined)\n                      index = this.getIndex(e1);\n                      if(sampleArray[index] !== undefined && !sampleArray[index].visited)\n                      {\n                        sampleArray[index].visited = true;\n                        queue.push(sampleArray[index]);\n                        visitedList.push(sampleArray[index]);\n                      }\n                  }\n    }\n    this.animation(visitedList);\n  }\n\nanimation = (list) =>\n{\n  for(let i = 0; i < list.length; i++)\n  {\n  setInterval(\n    ()=>{\n      this.visitedNode('red',list[i].x,list[i].y);\n        }\n    ,100*i);   }\n}\n\ngetIndex = (node) =>\n{\n  let sampleArray = {...this.state.array};\n  let num = 0;\n  for(let i in sampleArray)\n  {\n      if(sampleArray[i].x === node.x && sampleArray[i].y === node.y)\n      {\n           num = i;\n          return num;\n      }\n  }\n}\n\nvisitedNode = (color,x,y) =>\n{\n    let sampleArray = {...this.state.array};\n    for(let i in sampleArray)\n    {\n        if(sampleArray[i].x === x && sampleArray[i].y === y)\n        {\n          sampleArray[i].color = color;\n          sampleArray[i].visited = true;\n        }\n    }\n    this.setState({sampleArray});\n}\n\n\nhandleClick =(idx) =>\n{\n  let sampleArray = {...this.state.array}\n  console.log(sampleArray[idx]);\n  if(this.state.startEnd === 0)\n  {\n    sampleArray[idx].color = 'red'; \n    this.setState({sampleArray}); \n    this.setState({startEnd:1});\n  if(this.state.searchAlgo === 0)\n    this.bfsIterative(idx);\n    else\n    this.dfsIterative(idx);\n\n  }\n  else if(this.state.startEnd === 1)\n  {\n    sampleArray[idx].color = 'green';\n    this.setState({sampleArray});\n    this.setState({startEnd:5});\n  }\n}\n  renderSquare(i,idx) {\n    return <Square onClick={() => this.handleClick(idx)} key={idx} value={i} />;\n  }\n\n  handleInputChange= (event) => {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n    if(this.state.searchAlgo === 0)\n    this.setState({searchAlgo:1});\n    else \n    this.setState({searchAlgo:0});\n  }\n\nrender() {\n  const {array} = this.state;\n  return (\n    <>\n    <div className=\"board-area\">\n    <form onSubmit={this.handleSubmit}>\n   <label>\n          DFS\n          <input\n            name=\"DFS\"\n            type=\"checkbox\"\n            checked={this.state.searchAlgo === 0 ? false : true}\n            onChange={this.handleInputChange} />\n        </label>\n        <label>\n          BFS\n          <input\n            name=\"BFS\"\n            type=\"checkbox\"\n            checked={this.state.searchAlgo === 0 ? true : false}\n            onChange={this.handleInputChange} />\n        </label>\n      </form>\n    <div className=\"table-grid\">\n     {\n       array.map((value,idx)=>{\n       return this.renderSquare(value.color,idx)\n       })}\n   </div>\n   </div>\n   </>\n  );\n}\n}\n\nexport default Board;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}